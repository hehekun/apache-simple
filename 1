<p style="background-color:#00b0f0; padding: 5px; margin: 3px auto; widows:3; orphans:3;"><span style="color:#ffffff;font-size: 24px; font-weight: bold;">配置单次任务at</span></p>
​
###  一、 任务描述
​
在任务10中，我们利用python配置了一个非常非常非常简陋，一定会被黑客发现不正常的蜜罐，可以说这样的蜜罐除了用于一些基础功能以外，并不能起到任何捕获攻击的作用
这次，我们要配置一个具有一定功能的apache服务器并设置端口转发将代理服务器过滤后的数据转发给他，再将应答包回复给请求者。
面向拥有一定html，php基础的人

###  二、 任务目标
​
配置一个具有文件上传，用户注册登陆功能的apache服务器
​
###  三、 任务环境
​
ubuntu16.0.3
​
###  四、 任务实施

1.1 软件包安装
    安装
        命令：
        sudo apt-get update
        sudo apt-get install apache2
        sudo apt-get install php
        sudo apt-get install php-mysql
        sudo apt-get install libapache2-mod-php
    配置
        apache2 默认的几个配置文件：

        /etc/apache2/apache2.conf 是主要配置文件(这个文件的末尾可以看到，include了其它所有的配置文件)。
        /etc/apache2/ports.conf 始终包含在主配置文件中。它用于确定传入连接的侦听端口，默认为80，我们一般都会重新配置新的端口。
        其它配置文件在 /etc/apache2/sites-enabled，/etc/apache2/conf-enabled，/etc/apache2/mods-enabled 目录下。
        apache2的默认web目录：/var/www/html。（在/etc/apache2/sites-enabled/000-default.conf 里可以看到这个 DocumentRoot /var/www/html 配置）
        apache2 的默认用户是 www-data，定义在 /etc/apache2/envvars 文件中。
        设置默认主页的配置文件/etc/apache2/mods-enabled/dir.conf
        修改端口，这里我修改为8099

        修改它的监听端口
        sudo vim /etc/apache2/ports.conf

        修改它的主机端口
        sudo vim /etc/apache2/sites-available/000-default.conf

        apache2 的几个简单命令：启动、停止、重启、状态
        sudo /etc/init.d/apache2 [ start | stop | restart | status ]
        service apache2 [ start | stop | restart | status ]

        重启apache2 并查看状态
        sudo /etc/init.d/apache2 start
        sudo /etc/init.d/apache2 status

        访问测试
        测试apache2主页
        使用浏览器输入IP地址加端口号80

1.2 源码安装
    检查编译环境
        首先查看系统是否安装gcc/gcc-c++(要确保系统上有编译环境 C )，没有安装的话必须先安装：
        apt-get install gcc-c++

    下载下面几依赖包
        apr
        apr-util
        pcre
        httpd

    解压下载的压缩包
        (1) 在 /usr/local/下新建几个文件夹
        sudo mkdir /usr/local/apr
        sudo mkdir /usr/local/apr-util
        sudo mkdir /usr/local/pcre
        sudo mkdir /usr/local/httpd

        (2) 将下载的依赖包分别解压到其中：
        tar -zxvf apr-1.6.3.tar.gz -C /usr/local/apr
        tar -zxvf apr-util-1.6.1.tar.gz -C /usr/local/apr-util
        tar -zxvf pcre-8.32.tar.gz -C /usr/local/pcre
        tar -zxvf httpd-2.4.29.tar.gz -C /usr/local/httpd

    依次安装
        (1) apr:
        cd  apr-1.6.3
        ./configure –prefix=/usr/local/apr
        make
        make install

        (2) apr-util:
        cd  /usr/local/apr-util-1.6.1
        ./configure –prefix=/usr/local/apr-util –with-apr=/usr/local/apr/bin/apr-1-config
        make
        make install

        (3) pcre:
        cd  /usr/local/pcre-8.32
        ./configure –prefix=/usr/local/pcre –with-apr=/usr/local/apr/bin/apr-1-config
        make
        make install

        (4)httpd:
        cd  /usr/local/httpd-2.4.29
        –prefix=/usr/local/apache2 –sysconfdir=/etc/httpd –enable-so –enable-rewirte –enable-ssl –enable-cgi –enable-cgid –enable-modules=most –enable-mods-shared=most –enable-mpms-shared=all –with-apr=/usr/local/apr –with-apr-util=/usr/local/apr-util
        make
        make install 
        这里是把配置文件httpd.conf放在/etc/httpd下面的。
        
        启动：/usr/local/apache2/bin/apachectl start
        停止：/usr/local/apache2/bin/apachectl stop
        重启：/usr/local/apache2/bin/apachectl restart

    测试
        浏览器访问 localhost:80，出现 It works! ,表示启动成功

    配置多域名、端口映射
        apache2 默认的几个配置文件：

        /etc/apache2/apache2.conf 是主要配置文件(这个文件的末尾可以看到，include了其它所有的配置文件)。

        /etc/apache2/ports.conf 始终包含在主配置文件中。它用于确定传入连接的侦听端口，默认为80，我们一般都会重新配置新的端口。

        其它配置文件在 /etc/apache2/sites-enabled，/etc/apache2/conf-enabled，/etc/apache2/mods-enabled 目录下。
        apache2的默认web目录：/var/www/html。（在/etc/apache2/sites-enabled/000-default.conf 里可以看到这个 DocumentRoot /var/www/html 配置）
        apache2 的默认用户是 www-data，定义在 /etc/apache2/envvars 文件中。
        设置默认主页的配置文件/etc/apache2/mods-enabled/dir.conf

        Listen 80
        Listen 8080

        <VirtualHost *:80>
        DocumentRoot /var/www/html/项目1
        ServerName http://www.域名1.com 
        </Virtualhost>
        <Directory "/var/www/html/项目1">
        Options Indexes FollowSymLinks
        AllowOverride All
        Order allow,deny
        Allow from all
        </Directory>

        <VirtualHost *:80>
        DocumentRoot /var/www/html/项目2
        ServerName http://www.域名2.com 
        </Virtualhost>
        <Directory "/var/www/html/项目2">
        Options Indexes FollowSymLinks
        AllowOverride All
        Order allow,deny
        Allow from all
        </Directory>

        <VirtualHost Ip:8080>
         DocumentRoot /var/www/html/项目3
         ServerName Ip:8080
        </VirtualHost>
        <Directory "/var/www/html/项目3">
            Options Indexes FollowSymLinks
            AllowOverride All
            Order allow,deny
            Allow from all
        </Directory>

    卸载
        sudo apt-get –purge remove apache2
        sudo apt-get –purge remove apache2-common
        sudo apt-get –purge remove apache2-utils
        sudo apt-get autoremove apache2
        –purge 是不保留配置文件的意思

    删掉/etc/apache2文件夹:
        sudo rm -rf /etc/apache2

    删掉/var/www文件夹:
        sudo rm -rf /var/www

    删掉/etc/init.d/apache2文件:
        sudo rm -rf /etc/init.d/apache2

1.3 安装mysql
    apt-get install mysql-server mysql-client
    apt-get install libmysqlclient-dev

    创建数据库
    create database netsec;

    use netsec;

    创建用户表

    create table user(
    id varchar(50),
    password varchar(50),
    email varchar(50)
    );

    创建token表

    create table tokenlist(
    id varchar(50),
    token varchar(32)
    );

2.1 编写前端
    我们在 /var/www/html/项目1 中新建一个index.html文件作为前端
    <html lang="en" class="no-js">
        <head>
            <meta charset="utf-8"/>
            <title>index</title>
        </head>
        <body>
            <h1 >index</h1>
            <a href="juge.php">
            relogin
            </a>         

            
                <h2>register</h2>
                <h3>please input id and pswd and email</h3>
                <form name="reg" action="register.php" method="POST">
                id:<br>
                <input type="text" id="id" name="id">
                <br>
                password:<br>
                <input type="text" name="password">
                <br>
                email:<br>
                <input type="text" name="email">
                <br>
                <input type="submit" value="Submit" >
                </form> 

                <h2>login</h2>
                <h3>please input id and pswd and email</h3>
                <form action="login.php" method="POST">
                id:<br>
                <input type="text" name="id">
                <br>
                password:<br>
                <input type="text" name="password">
                <br>
                <br>
                <input type="submit" value="Submit">
                </form>        
        </body>
    </html>
    这个html文件提供了两个简单的表单入口分别提交到login.php register.php 
    同时还提供了一个relogin入口用来根据cookie登陆。

3.1 编写后端
    register.php
        用于处理用户注册
        <?php
            $servername="127.0.0.1";
            $username="root";
            $password="passwd";
            $db="netsec";
             
            $con = mysqli_connect($servername, $username, $password,$db);
             

            if (!$con) {
                echo "oh no";
                die("Connection failed: " . mysqli_connect_error());
            }


            $ids=$_POST[id];
            $passwords=$_POST[password];
            $emails=$_POST[email];

            $sqll = 'select id from User where id ='.$ids.' and password='.$passwords.';';
            $result=mysqli_query($con,$sqll);

            if(mysqli_num_rows($result) > 0)
            {
             echo "<script>
            alert(\"id already registed\");
            window.history.go(-1);
            </script>";
            }


            $sql = 'insert into User(id,password,email) values("'.$ids.'","'.$passwords.'","'.$emails.'");';

            if(mysqli_query($con,$sql))
            {
                echo "<script>
            alert(\"success!!\");
            window.history.go(-1);
            </script>";
            }
            else
            {
                echo "nope";
            }

            mysqli_close($con);
        ?>
        后端用php编写，对index.html传输过来的表单进行注册操作，将表单数据插入数据库中

    login.php
        用于处理用户登录
        <?php
            $servername="localhost";
            $username="root";
            $password="passwd";
            $db="netsec";

            function getRandomStr($len, $special=false){
                $chars = array(
                    "a", "b", "c", "d", "e", "f", "0", "1", "2",
                    "3", "4", "5", "6", "7", "8", "9"
                );

                if($special){
                    $chars = array_merge($chars, array(
                        "!", "@", "#", "$", "?", "|", "{", "/", ":", ";",
                        "%", "^", "&", "*", "(", ")", "-", "_", "[", "]",
                        "}", "<", ">", "~", "+", "=", ",", "."
                    ));
                }

                $charsLen = count($chars) - 1;
                shuffle($chars);                            //打乱数组顺序
                $str = '';
                for($i=0; $i<$len; $i++){
                    $str .= $chars[mt_rand(0, $charsLen)];    //随机取出一位
                }
                return $str;
            }
            $rand = getRandomStr(32);

            $con = mysqli_connect($servername, $username, $password, $db);
            if (!$con)
              {
               die("Connection failed: " . mysqli_connect_error());
              }

            $ids=$_POST[id];
            $passwords=$_POST[password];
            echo $ids;

            $sql1 = 'insert into tokenlist(id,token) values ('.$ids.',"'.$rand.'");';
            $sql = 'select id from User where id ='.$ids.' and password='.$passwords.';';
            $result=mysqli_query($con,$sql);

            if(mysqli_num_rows($result)&&mysqli_query($con,$sql1))
            {
                setcookie("user",$ids, time()+3600);
                setcookie("password",$passwords, time()+3600);
                setcookie("token",$rand);
                $url="location:main.php";
                header($url);
            }
            else
            {
                echo "badbad!";
            }

            mysqli_close($con);
        ?>
        登陆的思路很简单，直接查数据库，看是否有匹配数据，有则登陆成功，这里没有做任何sql注入的防护
        大家可以看到这里我写了一个随机数函数生成了token并插入tokenlist，这是为了防止CSRF。具体后面一章会讲，咱们这里先梳理大体框架

    main.php
        用户成功登陆后的页面
        <?php 
            $servername = "localhost";
            $username = "root";
            $password = "passwd";
            $db = "netsec";
             
            // 创建连接
            $con = mysqli_connect($servername, $username, $password, $db);
            // 检测连接
            if (!$con) {
                die("Connection failed: " . mysqli_connect_error());
            }

            $ids=$_COOKIE["user"];
            $passwords=$_COOKIE["password"];

            $sql = 'select id from User where id ='.$ids.' and password='.$passwords.';';

            $result = mysqli_query($con, $sql);

            if(mysqli_num_rows($result) > 0)
            {
                setcookie("user",$ids, time()+3600);
                setcookie("password",$passwords, time()+3600);
                setcookie("token","",time()-3600); 

                $sql = 'delete from tokenlist where id ='.$ids.';';
            }   
            else
            {
                $url="location:index.html";
                header($url);
            }     

        ?>
        <html >

            <head>
                <meta charset="utf-8"/>
                <title>main</title>
            </head>

            <body>
                        <?php 
                            echo "<p>hello,".$_COOKIE["user"]."</p>";
                         ?>

            <form action="upload-back.php" method="post" enctype="multipart/form-data" name="upload_form">
            <label>选择文件</label>
            <input name="file" type="file"/>
            <input name="upload" type="submit" value="上传" />
            </form>
            </body>
        </html>
        先检验token并删除tokenlist中对应条，设置cookie，给出上传入口。

    upload-back.php
        用于处理用户上传文件，有最简单的文件后缀名检测(可被大小写绕过)
        <?php
            echo $_FILES["file"]["name"];
            $back = strstr($_FILES["file"]["name"],".");
            if (strpos($back,"php"))
            {
              echo "badbad";
            }
            else
            {
              $name = strtolower($_FILES["file"]["name"]);
              if ($_FILES["file"]["error"] > 0)
            {
            echo "Return Code: " . $_FILES["file"]["error"] . "<br />";
            }
          else
            {
            echo "Upload: " . $name . "<br />";
            echo "Type: " . $_FILES["file"]["type"] . "<br />";
            echo "Size: " . ($_FILES["file"]["size"] / 1024) . " Kb<br />";
            echo "Temp file: " . $_FILES["file"]["tmp_name"] . "<br />";

            if (file_exists("upload/" . $name))
              {
              echo $name . " already exists. ";
              }
            else
              {
              move_uploaded_file($_FILES["file"]["tmp_name"],
              "upload/" . $name);
              echo "Stored in: " . "upload/" . $name;
              }
            }
            }
        ?>
        对用户上传的文件进行后缀名检测，如果为php文件则不保存，如果不是则上传到当前目录的upload文件夹下。
